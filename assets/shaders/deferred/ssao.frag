#version 430
#include"../octmap.glsl"
layout(location=0)out float FragColor;in vec2 TexCoords;layout(binding=0)uniform sampler2D GBuffer1;layout(binding=1)uniform sampler2D texNoise;layout(binding=2)uniform sampler2D depth;uniform vec3 samples[64];uniform mat4 invprojection;layout(std140, binding = 6)uniform Matrices{mat4 projection;mat4 view;};uniform vec2 noiseScale;vec3 t(vec2 s,float v){vec4 d=invprojection*vec4(s*2.-1.,v,1);return d.xyz/d.w;}void main(){float v=texelFetch(depth,ivec2(gl_FragCoord.xy),0).x;if(v>=1.){FragColor=1.;return;}vec3 d=t(TexCoords,v),s=mat3(view)*normalize(signed_oct_to_float32x3(texelFetch(GBuffer1,ivec2(gl_FragCoord.xy),0).xyz)),g=texture(texNoise,TexCoords*noiseScale).xyz;g=normalize(g-s*dot(g,s));mat3 n=mat3(g,cross(s,g),s);v=0.;for(int g=0;g<64;g++){vec3 s=d+n*samples[g]*.5;vec4 i=projection*vec4(s,1);i.xyz/=i.w;i.xyz=i.xyz*.5+.5;float y=texture(depth,i.xy).x;vec3 b=t(i.xy,y);v+=(b.z>=s.z+.025?1.:0.)*smoothstep(0.,1.,.5/abs(d.z-b.z));}v=1.-v/64;FragColor=v;}